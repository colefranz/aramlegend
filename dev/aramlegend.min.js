"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Build = function (_React$Component) {
  _inherits(Build, _React$Component);

  function Build(props) {
    _classCallCheck(this, Build);

    var _this = _possibleConstructorReturn(this, (Build.__proto__ || Object.getPrototypeOf(Build)).call(this, props));

    _this.state = { ready: false };

    _this.getBuilds = _this.getBuilds.bind(_this);
    return _this;
  }

  _createClass(Build, [{
    key: "getBuilds",
    value: function getBuilds() {
      if (this.props.info) {
        return this.props.info.builds.map(function (item, index) {
          return React.createElement(Item, { key: index, info: item });
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        { id: "build" },
        React.createElement("img", { className: "background",
          src: "http://riot-web-static.s3.amazonaws.com/images/news/April_2013/29_04_2013_Howling_Abyss_Announcement/LOL.com.HowlingAbyss.FooterSS.jpg" }),
        React.createElement(
          "div",
          { className: "foreground" },
          this.getBuilds()
        )
      );
    }
  }]);

  return Build;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Game = function (_React$Component) {
  _inherits(Game, _React$Component);

  function Game(props) {
    _classCallCheck(this, Game);

    var _this = _possibleConstructorReturn(this, (Game.__proto__ || Object.getPrototypeOf(Game)).call(this, props));

    _this.state = { active: undefined };

    _this.getTeam = _this.getTeam.bind(_this);
    _this.setActive = _this.setActive.bind(_this);
    return _this;
  }

  _createClass(Game, [{
    key: 'getTeam',
    value: function getTeam(name) {
      var teamId = Game.teams()[name],
          classname = name + '-team',
          callback = this.setActive,
          activeId = '';

      if (this.state.active) {
        activeId = this.state.active.summonerId;
      }

      var team = this.props.game.participants.map(function (participant) {
        if (participant.teamId === teamId) {
          return React.createElement(Tab, { key: participant.summonerId,
            id: participant.summonerId,
            info: participant.champ,
            name: participant.summonerName,
            callback: callback,
            active: activeId === participant.summonerId });
        }
      });

      return React.createElement(
        'div',
        { className: "team " + classname },
        team
      );
    }
  }, {
    key: 'setActive',
    value: function setActive(id) {
      var active = this.props.game.participants.find(function (participant) {
        return participant.summonerId === id;
      });
      this.setState({ active: active });
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.props.game) {
        return null;
      }

      return React.createElement(
        'div',
        { id: 'game' },
        React.createElement(
          'p',
          null,
          'Game mode: ',
          this.props.game.gameMode
        ),
        this.getTeam('blue'),
        React.createElement(Build, { info: this.state.active }),
        this.getTeam('red')
      );
    }
  }], [{
    key: 'teams',
    value: function teams() {
      return {
        blue: 100,
        red: 200
      };
    }
  }]);

  return Game;
}(React.Component);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Item = function (_React$Component) {
  _inherits(Item, _React$Component);

  function Item(props) {
    _classCallCheck(this, Item);

    return _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));
  }

  _createClass(Item, [{
    key: "render",
    value: function render() {
      return React.createElement("img", { className: "item", src: this.props.info.icon });
    }
  }]);

  return Item;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tab = function (_React$Component) {
  _inherits(Tab, _React$Component);

  function Tab(props) {
    _classCallCheck(this, Tab);

    var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this, props));

    _this.isActive = _this.isActive.bind(_this);
    return _this;
  }

  _createClass(Tab, [{
    key: 'isActive',
    value: function isActive() {
      return this.props.active ? 'active' : '';
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(
        'div',
        { className: "tab " + this.isActive(),
          onClick: function onClick() {
            return _this2.props.callback(_this2.props.id);
          } },
        React.createElement('img', { src: this.props.info.icon, title: this.props.info.name }),
        React.createElement(
          'p',
          null,
          this.props.name
        )
      );
    }
  }]);

  return Tab;
}(React.Component);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_React$Component) {
  _inherits(App, _React$Component);

  function App(props) {
    _classCallCheck(this, App);

    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

    _this.state = {
      summonerName: '',
      activeGame: undefined,
      error: ''
    };

    _this.handleNewSearch = _this.handleNewSearch.bind(_this);
    _this.getInformation = _this.getInformation.bind(_this);
    _this.summonerNameChange = _this.summonerNameChange.bind(_this);
    _this.displayError = _this.displayError.bind(_this);
    return _this;
  }

  _createClass(App, [{
    key: 'handleNewSearch',
    value: function handleNewSearch(event) {
      event.preventDefault();
      this.getInformation();
    }
  }, {
    key: 'getInformation',
    value: function getInformation() {
      var self = this;

      this.setState({ error: '' });

      fetch('/summoners', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: this.state.summonerName
        })
      }).then(function (res) {
        if (!res.ok) {
          self.setState({ error: res.statusText });

          return;
        }

        res.json().then(function (body) {
          self.setState({ activeGame: body });
        });
      }, function (res) {
        self.setState({ error: res.statusText });
      });
    }
  }, {
    key: 'summonerNameChange',
    value: function summonerNameChange(event) {
      this.setState({ summonerName: event.target.value });
    }
  }, {
    key: 'displayError',
    value: function displayError() {
      if (this.state.error !== '') {
        return React.createElement(
          'p',
          null,
          this.state.error
        );
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.textInput.focus();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(
        'div',
        { id: 'main' },
        React.createElement(
          'form',
          { onSubmit: this.handleNewSearch },
          React.createElement(
            'label',
            null,
            'Enter Name:',
            React.createElement('input', { type: 'text',
              ref: function ref(input) {
                _this2.textInput = input;
              },
              value: this.state.value,
              onChange: this.summonerNameChange })
          ),
          this.displayError()
        ),
        React.createElement(Game, { game: this.state.activeGame })
      );
    }
  }]);

  return App;
}(React.Component);

ReactDOM.render(React.createElement(App, null), document.getElementById('root'));